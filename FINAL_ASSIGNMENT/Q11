   #include <stdio.h>
#include <stdlib.h>

struct Node {
int data;
struct Node* next;
};

struct Graph {
int numVertices;
struct Node** adjList;
};

struct Node* createNode(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = data;
newNode->next = NULL;
return newNode;
}

struct Graph* createGraph(int numVertices) {
struct Graph* graph = (struct Graph*)malloc(sizeof(struct
Graph));
graph->numVertices = numVertices;
graph->adjList = (struct Node*)malloc(numVertices *sizeof(struct Node));
for (int i = 0; i < numVertices; i++) {
graph->adjList[i] = NULL;
}
return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
struct Node* newNode = createNode(dest);
newNode->next = graph->adjList[src];
graph->adjList[src] = newNode;
// Uncomment the following lines for an undirected graph
// newNode = createNode(src);
// newNode->next = graph->adjList[dest];
// graph->adjList[dest] = newNode;
}

void BFS(struct Graph* graph, int startVertex) {
int visited[graph->numVertices];
for (int i = 0; i < graph->numVertices; i++) {
visited[i] = 0;
}

int queue[graph->numVertices];
int front = -1, rear = -1;

visited[startVertex] = 1;
queue[++rear] = startVertex;
while (front <= rear) {

int currentVertex = queue[++front];
printf("%d ", currentVertex);

struct Node* temp = graph->adjList[currentVertex];
while (temp) {
int adjVertex = temp->data;


if (!visited[adjVertex]) {
visited[adjVertex] = 1;
queue[++rear] = adjVertex;
}
temp = temp->next;
}
}
}

void DFS(struct Graph* graph, int startVertex, int visited[]) {
visited[startVertex] = 1;
printf("%d ", startVertex);
struct Node* temp = graph->adjList[startVertex];
while (temp) {
int adjVertex = temp->data;
if (!visited[adjVertex]) {
DFS(graph, adjVertex, visited);
}
temp = temp->next;
}
}
int main() {

struct Graph* graph = createGraph(4);

addEdge(graph, 0, 1);
addEdge(graph, 0, 2);
addEdge(graph, 1, 2);
addEdge(graph, 2, 0);
addEdge(graph, 2, 3);
addEdge(graph, 3, 3);
printf("Breadth-First Search (BFS) starting from vertex 2:\n");
BFS(graph, 2);
printf("\n\nDepth-First Search (DFS) starting from vertex 2:\n");
int visitedDFS[graph->numVertices];
for (int i = 0; i < graph->numVertices; i++) {
visitedDFS[i] = 0;
}
DFS(graph, 2, visitedDFS);
return 0;
}
