#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new binary tree node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// Function to find the size of the largest independent set in a binary tree
int findLISize(struct Node* root) {
    if (root == NULL)
        return 0;

    // Calculate the size of the largest independent set excluding the current node
    int sizeExcl = findLISize(root->left) + findLISize(root->right);

    // Calculate the size of the largest independent set including the current node
    int sizeIncl = 1;
    if (root->left)
        sizeIncl += findLISize(root->left->left) + findLISize(root->left->right);
    if (root->right)
        sizeIncl += findLISize(root->right->left) + findLISize(root->right->right);

    // Return the maximum of the two sizes
    return (sizeExcl > sizeIncl) ? sizeExcl : sizeIncl;
}

int main() {
    // Example usage
    struct Node* root = newNode(10);
    root->left = newNode(20);
    root->right = newNode(30);
    root->left->left = newNode(40);
    root->left->right = newNode(50);

    int lisSize = findLISize(root);
    printf("Size of the largest independent set: %d\n", lisSize);

    return 0;
}




